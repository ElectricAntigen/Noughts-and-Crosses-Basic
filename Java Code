import java.util.*;

public class Main {
    public static void main(String[] args) { //Main method
        Scanner kb = new Scanner(System.in); //Scanner declaration
        boolean flag1 = false; //Flag declaration
        System.out.println("Noughts and Crosses – Player 1 = O, Player 2 = X"); //Instructions

        while (!flag1) { //While loop
            winner(loop()); //Method call

            System.out.print("Do you want to play again? (Y/N) ");
            if (kb.nextLine().toUpperCase().charAt(0) == 'N') { //Possible loop end
                flag1 = true;
            }
        }

        System.out.println("Goodbye!");
    }

    public static void formatter(char[][] board) { //formatter method declaration
        for (int i = 0; i < 3; i++) { //For loop
            for (int j = 0; j < 3; j++) { //For loop
                if (board[i][j] == 'O') { //Selection
                    System.out.print(" O ");
                } else if (board[i][j] == 'X') {
                    System.out.print(" X ");
                } else {
                    System.out.print(" • ");
                }
            }
            System.out.println();
        }
    }

    public static boolean conditions(char[][] board) { //conditions method declaration
        for (int i = 0; i < 3; i++) { //Set of conditions
            if (board[i][0] == board[i][1] && board[i][0] == board[i][2] && (board[i][0] == 'X' || board[i][0] == 'O')) {
                return true;
            } else if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && (board[0][i] == 'X' || board[0][i] == 'O')) {
                return true;
            } else if (board[0][0] == board[1][1] && board[0][0] == board[2][2] && (board[0][0] == 'X' || board[0][0] == 'O')) {
                return true;
            } else if (board[0][2] == board[1][1] && board[0][2] == board[2][0] && (board[0][2] == 'X' || board[0][2] == 'O')) {
                return true;
            }
        }
        return false;
    }

    public static boolean draw(char[][] board) { //draw(tie) method declaration
        int count = 0; //Check if array is full
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 'X' && board[i][j] != 'O') {
                    count ++;
                }
            }
        }

        return count == 0;
    }

    public static int[] playerMove(boolean oneTurn, Scanner kb) { //playerMover method declaration
        int player = 0;

        if (oneTurn) {
            player = 1;
        } else {
            player = 2;
        }

        System.out.print("Player " + player + ", enter your move: "); //Reading player input
        String move = kb.nextLine();
        String[] move1 = move.split(",");
        int[] nums = new int[2];
        for (int i = 0; i < 2; i++) { nums[i] = Integer.parseInt(move1[i]); }

        return nums;
    }

    public static boolean boundCheck(int[] nums) { //boundCheck method declaration
        return (nums[0] > 2 || nums[1] > 2);
    }

    public static char[][] move(char[][] board, int[] nums, boolean oneTurn) { //move method declaration
        char symbol = ' '; //Method alters board array
        if (oneTurn) {
            symbol = 'O';
        } else {
            symbol = 'X';
        }

        board[nums[0]][nums[1]] = symbol;

        return board;
    }

    public static boolean takenCheck(int[] nums, char[][] board) {  //takenCheck method declaration
        try { //Idiot-proofing
            return board[nums[0]][nums[1]] == 'X' || board[nums[0]][nums[1]] == 'O'; //Return boolean based on parameters
        } catch (Exception e) {
            return false;
        }
    }

    public static char[][] game(char[][] board, boolean oneTurn) { //game method declaration
        Scanner kb = new Scanner(System.in);
        boolean flag = false;
        boolean takenFlag = true;
        int[] nums = new int[2];

        while (flag || takenFlag) { //Loops until input coordinates are neither out of bounds nor overlapping.
            nums = playerMove(oneTurn, kb);
            flag = boundCheck(nums);
            takenFlag = takenCheck(nums, board);

            if (flag) {
                System.out.println("That coordinate is out of bounds. Please retry.");
            } else if (takenFlag) {
                System.out.println("That coordinate is taken. Please retry. ");
            }
        }

        board = move(board, nums, oneTurn); //Changes board array

        return board;
    }

    public static boolean[] loop() { //loop method declaration
        char[][] board = new char[3][3];
        int count = 0;
        boolean oneTurn = true;
        formatter(board);
        boolean isDraw = false;

        while (!conditions(board) && !isDraw) { //Loop while there is no winner or draw
            board = game(board, oneTurn);
            formatter(board);
            isDraw = draw(board);

            if (!conditions(board)) {
                oneTurn = !oneTurn;
            }
        }

        boolean[] isIsDraw = new boolean[2];

        if (isDraw) { //Selection
            isIsDraw[0] = true;
            isIsDraw[1] = isDraw;
            return isIsDraw;
        } else {
            isIsDraw[0] = false;
            isIsDraw[1] = oneTurn;
            return isIsDraw;
        }
    }

    public static void winner(boolean[] isIsDraw) { //winner method declaration
        if (isIsDraw[0]) { //Selection to output correct statement
            System.out.println("It's a draw!");
        } else if (!isIsDraw[0] && isIsDraw[1]) {
            System.out.println("Player 1 wins!");
        } else {
            System.out.println("Player 2 wins!");
        }
    }
}
